<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPompington</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

state = WEAPON_STATES.__MOVE;

attackType = -1; 

playerId = noone;

ret = -1;
returnTmrCnt = 0; 

anImageIndex = 0;
anImageSpeed = 0;
anImageNumber = 0;

reloadAm = 0;
reloadCnt = 0;
reloadTmrCnt = 0;
reloadTmrNewbull = -1;
reloadTmrBegin = -1;
weaponMaxAngle = 6;
hitCount = 0;
reloadAdd = 0;
reloadAddFinal = 0;

animEnded = 0;

angleBegin = 0;

animCnt = 0;
animIndex = 0;
animIndexNext = 0;

anglePrevCnt = 2;
anglePrev[anglePrevCnt - 1] = image_angle;

angleNeed = 0;
angleNeedDown[0] = 0;
angleNeedUp[0] = 0;

anOffX = 0;
anOffXNeed[0] = 0;
anOffXSpd[0] = 0;

anOffY = 0;
anOffYNeed[0] = 0;
anOffYSpd[0] = 0;

angleRot = 9;
angleRotDown[0] = 0;
angleRotUp[0] = 0;

anMaxAngle = 10;

canAttackTmr = -1;
canAttack = 1;

attackCount = 0;

// for custom weapons
kickCnt = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
if (sprite_index != -1)
{
    // accumulate custom image_index
    customAnimableProceed();
}   

if (canAttackTmr &amp;&amp; !--canAttackTmr)
{
    canAttackTmr = 0;
    // can attack again
    canAttack = 1;
}
        
// SWITCH ADD
switch (state)
{
case WEAPON_STATES.__MOVE:
    anOffX = approach(anOffX, 0, 1.5);
    anOffY = approach(anOffY, 0, 1.5);    
    break;
    
case WEAPON_STATES.__RETURN_TO_TOP:
    //weaponFleeAngleSet(image_angle);
    image_angle = approach(image_angle, angleNeed, angleRot);
    if (image_angle == angleNeed)
    {
        attackCount--;
        if (attackCount &lt;= 0)
        {
            with (playerId)
                playerWeaponSetState(WEAPON_STATES.__MOVE);       
        }
        else
        {
            with (playerId)
                playerAttack(0); 
        }      
    }            
    break;
    
case WEAPON_STATES.__MOVE_NOANIM:
    if (ret &amp;&amp; !--ret)
        with (playerId)
            playerWeaponSetState(WEAPON_STATES.__RETURN_TO_TOP);    
        
    anOffX = approach(anOffX, anOffXNeed[animIndex], anOffXSpd[animIndex]);
    anOffY = approach(anOffY, anOffYNeed[animIndex], anOffYSpd[animIndex]);    
    break;    
    
case WEAPON_STATES.__MELEE_DOWN:
    //SWITCH ADD
    switch (attackType)
    {
    case WEAPON_ATTACK_TYPE.__DOWN_TIMER_UP:
        image_angle = approach(image_angle, angleNeed, angleRot);
        anOffX = approach(anOffX, anOffXNeed[animIndex], anOffXSpd[animIndex]);
        anOffY = approach(anOffY, anOffYNeed[animIndex], anOffYSpd[animIndex]);
        if (image_angle == angleNeed 
            &amp;&amp; anOffX == anOffXNeed[animIndex]
            &amp;&amp; anOffY == anOffYNeed[animIndex])
        {
            animIndexNext = animIndex + 1;
            // combo
            if (attackCount == 1)
            {
                // do not reset angle
                with (playerId)
                {
                    physicalClearMaskKick();
                    playerWeaponSetState(WEAPON_STATES.__MOVE_NOANIM);   
                }
                image_angle = angleNeed;
                ret = returnTmrCnt;
            }
            else
            {
                attackCount--;
                with (playerId)
                    playerAttack(0); 
            }      
        }            
        break;
        
    default:
        image_angle = approach(image_angle, angleNeed, angleRot);
        if (image_angle == angleNeed)
        {
            if (attackCount == 1)
            {
                // do not reset angle
                with (playerId)
                {
                    physicalClearMaskKick();
                    playerWeaponSetState(WEAPON_STATES.__MOVE);   
                }
                image_angle = angleNeed;
                ret = returnTmrCnt;
            }
            else
            {
                image_angle = angleNeed;
                ret = returnTmrCnt;
                attackCount--;
                with (playerId)
                    playerAttack(0); 
            }      
        }            
        break;   
    }
    break;
        
case WEAPON_STATES.__MELEE_UP:
    switch (attackType)
    {
    case WEAPON_ATTACK_TYPE.__DOWN_TIMER_UP:
        image_angle = approach(image_angle, angleNeed, angleRot);
        anOffX = approach(anOffX, 0, anOffXSpd[animIndex]);
        anOffY = approach(anOffY, 0, anOffYSpd[animIndex]);
        if (image_angle == angleNeed 
            &amp;&amp; anOffX == anOffXNeed[animIndex]
            &amp;&amp; anOffY == anOffYNeed[animIndex])
        {
            // reset angle
            with (playerId)
                playerWeaponSetState(WEAPON_STATES.__MOVE);   
        }            
        break;
    default:
        image_angle = approach(image_angle, angleNeed, angleRot);
        if (image_angle == angleNeed)
        {
            attackCount--;
            if (attackCount &lt;= 0)
                with (playerId)
                    playerWeaponSetState(WEAPON_STATES.__MOVE);       
            else
                with (playerId)
                    playerAttack(0);       
        }
        break;   
    }
    break;    
    
    
    
    
    
case WEAPON_STATES.__MELEE_FORW:
    image_angle = playerId.mousedir;
    angleBegin = min(angleBegin + angleRot, angleNeed);
    if (angleBegin == angleNeed)
    {
        with (playerId)
            playerWeaponSetState(WEAPON_STATES.__MELEE_BACKW);
        exit;
    }
    break;
    
case WEAPON_STATES.__MELEE_BACKW:
    image_angle = playerId.mousedir;
    angleBegin = max(angleBegin - angleRot, 0);
    if (angleBegin == 0)
    {
        with (playerId)
            playerWeaponSetState(WEAPON_STATES.__MOVE);
        exit;
    }
    break;
    
    
    
    
    
case WEAPON_STATES.__RANGE_SHOT:
    if (animEnded)
    {
        animEnded = 0;
        with (playerId)
        {
            if (weaponSprite[2] != -1)
                playerWeaponSetState(WEAPON_STATES.__RANGE_RECOIL);
            else // no recoil
                playerWeaponSetState(WEAPON_STATES.__MOVE);
        }
    }
    break;
case WEAPON_STATES.__RANGE_RECOIL:
    if (animEnded)
    {
        with (playerId)
        {
            playerWeaponSetState(WEAPON_STATES.__MOVE);
        }
    }
    break;
case WEAPON_STATES.__RANGE_RELOAD:
    if (reloadTmrNewbull &amp;&amp; !--reloadTmrNewbull)
    {
        var rla = min(reloadAdd, reloadAddFinal - playerId.weaponAmmo);
        reloadAm -= rla;
        reloadTmrNewbull = reloadTmrCnt;    
        with (playerId)
        {
            weaponAmmo += rla;
            ammo[weaponInf[W_PR.__BULLET_TYPE]] -= rla;
        }
    }
    if (reloadAm &lt;= 0)
    {
        with (playerId)
            playerWeaponSetState(WEAPON_STATES.__MOVE);
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if (sprite_index != -1)
{
    // prev
    //draw_sprite_ext(sprite_index, anImageIndex, x + anOffX * xsc, y + anOffY * image_yscale, xsc, image_yscale, anglePrev, image_blend, image_alpha / 1.5);
    var add = 0;
    if (playerId.weaponType == WEAPON_TYPE.__MELEE)
    {
        switch (playerId.weapon)
        {
        case WEAPONS.__KNIFE:
            draw_sprite_ext(sprite_index, anImageIndex, 
                x + anOffX * xsc + lengthdir_x(angleBegin, image_angle), y + anOffY * image_yscale + lengthdir_y(angleBegin, image_angle), 
                xsc, image_yscale, image_angle + 5 * sin(degtorad(360 * angleBegin/angleNeed)), image_blend, image_alpha);
                exit;
            break;
        default:       
            add = playerId.mousedir;
            break;
        }
    }
    draw_sprite_ext(sprite_index, anImageIndex, x + anOffX * xsc, y + anOffY * image_yscale, xsc, image_yscale, image_angle + add, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///not to draw himself
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
