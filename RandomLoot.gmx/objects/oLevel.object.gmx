<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level controller
image_speed = 0;

tw = LEVEL.TILE_W;
th = LEVEL.TILE_H;

minLeafSize = 12;
maxLeafSize = 18;
minRoomSize = 8;
maxRoomSize = 15;

cnt = 0;
leafs = ds_list_create();
rcnt = 0;

floorD = 100000;
carpetD = 99999;
ceilD = -99999;

toiletLeftoff = 5;

ww = ceil(room_width / tw);
hh = ceil(room_height / th)

// grid
level = ds_grid_create(ww, hh);
ds_grid_set_region(level, 0, 0, ww, hh, LEVEL.VOID);

// collision indicies
colLevel = ds_grid_create(ww, hh);
for (var i = 0; i &lt; ww; i++)
{
    for (var j = 0; j &lt; hh; j++)
    {
        colLevel[# i, j] = undefined;
    }
}

// pathfind
levelPf = mp_grid_create(0, 0, ww, hh, LEVEL.TILE_W, LEVEL.TILE_H);


// collision helper
////////////////////////////////////////////////// r  t   l  b
colOffset = ds_map_create();
levelCollisionHelperInit(TILES.__WALL, 0, 0, 0, 0);
// prison cells
levelCollisionHelperInit(TILES.__PS_LEFT,          45, 0, 0, 0);
levelCollisionHelperInit(TILES.__PS_RIGHT,         0, 0, 45, 0);
levelCollisionHelperInit(TILES.__PS_TOP,           0, 50, 0, 0);
levelCollisionHelperInit(TILES.__PS_BOTTOM,        0, 50, 0, 0);

levelCollisionHelperInit(TILES.__PS_BOTTOM_RIGHT,  0, 50, 0, 0);
levelCollisionHelperInit(TILES.__PS_BOTTOM_RIGHT,  0, 0, 45, 0);

levelCollisionHelperInit(TILES.__PS_BOTTOM_LEFT,  0, 50, 0, 0);
levelCollisionHelperInit(TILES.__PS_BOTTOM_LEFT,  45, 0, 0, 0);

levelCollisionHelperInit(TILES.__BED_HL,           0, 25, 9, 0);
levelCollisionHelperInit(TILES.__BED_HR,           13, 25, 0, 0);

levelCollisionHelperInit(TILES.__BED_VT,           6, 18, 5, 0);
levelCollisionHelperInit(TILES.__BED_VB,           6, 0, 5, 13);

levelCollisionHelperInit(TILES.__CURBSTONE,        2, 40, 2, 0);

//

// canteen
levelCollisionHelperInit(TILES.__TABLE_LEFT, 0, 20, 10, 0);
levelCollisionHelperInit(TILES.__TABLE_HOR_CENT, 0, 20, 0, 0);
levelCollisionHelperInit(TILES.__TABLE_RIGHT, 12, 20, 0, 0);

levelCollisionHelperInit(TILES.__TABLE_VERT, 8, 0, 8, 0);

levelCollisionHelperInit(TILES.__COOLEOLA_VERT, 10, 0, 10, 22);

// shower
levelCollisionHelperInit(TILES.__SHOWER_WALL_RIGHT, 45, 0, 0, 0);
levelCollisionHelperInit(TILES.__SHOWER_TUMB, 0, 0, 0, 48);
levelCollisionHelperInit(TILES.__SHOWER_WET, 6, 31, 5, 5);
levelCollisionHelperInit(TILES.__SHOWER_BUCKET, 30, 30, 2, 15);
levelCollisionHelperInit(TILES.__SHOWER_STOOL, 3, 35, 3, 0);

levelCollisionHelperInit(TILES.__CRATE_LEFT, 12, 28, 12, 12);
levelCollisionHelperInit(TILES.__CRATE_RIGHT, 12, 28, 12, 12);

// NEW
cellW = 12;
cellH = 12;
cellRoomW = 10;
cellRoomH = 10;
prisonCellW = 5;
prisonCellH = 4;
// 2d array for graph
cells = ds_list_create();
cellsVis[0] = 0; //room_width div cellW * room_height div cellH



levelGenerate();
ds_list_destroy(cells);
cellsVis = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(leafs);
ds_grid_destroy(level);
ds_list_destroy(cells);
cellsVis = 0;
ds_grid_destroy(colLevel);
mp_grid_destroy(levelPf);

for (var i = 0; i &lt; ww; i++)
    for (var j = 0; j &lt; hh; j++)
    {
        var list = colLevel[# i, j];
        for (var l = 0, lc = ds_list_size(list); l &lt; lc; l++)
            list[| l] = 0;
            //ds_list_destroy(ds_list_find_value(colLevel[# i, j], l));
        ds_list_destroy(list);
    }
    
var first = ds_map_find_first(colOffset);
for (var i = 0, sz = ds_map_size(colOffset); i &lt; sz; i++;)
{
    var list = colOffset[? first] = 0; 
    for (var k = 0, lsize = ds_list_size(list); k &lt; lsize; k++)
        list[| k] = 0; // clear the array
    ds_list_destroy(list);
    first = ds_map_find_next(colOffset, first);
}

     
ds_map_destroy(colOffset);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
