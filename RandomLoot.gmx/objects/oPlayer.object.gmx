<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerKamikaze</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oDynamicObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

// Stats
spd = 4;
hp = 12;
_hp = 12;

anMaxAngle = 6;

mousedir = 0;

restoreWeap = 0;
restore = -1;

recoilSpd = 0;
recoilApply = 0;

cannot = 0;

mX = x;
mY = y;
mD = 0;
 
ammo[AMMO.__CNT - 1] = 0; // ammo we have right now
ammoMax[AMMO.__CNT - 1] = 300;
for (var i = 0; i &lt; AMMO.__CNT; i++)
    ammoMax[i] = 1000;
ammoMax[AMMO.__BULLET] = 300;
ammoMax[AMMO.__SHOTGUN] = 100;
ammoMax[AMMO.__SHOTGUN] = 100;
ammoMax[AMMO.__GRENADES] = 65;
ammoMax[AMMO.__ENERGY] = 500; // 500;

for (var i = 0; i &lt; AMMO.__CNT; i++)
    ammo[i] = ammoMax[i];
    
weaponCd = 0;

weaponObj = instance_create(x, y, oPlayerWeapon);
weapon = WEAPONS.__NONE;
weaponType = WEAPON_TYPE.__RANGE;
weaponInf = -1; // array
weaponAmmo = 0;

weaponSprite[3] = -1;
weaponAnimSpeed[3] = 0;
weaponSpriteNoammo = -1;

weaponBack = WEAPONS.__NONE;
weaponBackAmmo = 0;
weaponBackInf = -1; // array
weaponXoff = 0;
weaponYoff = 0;
weaponBlend = c_white;

expRad = 0; // explosion radius 
lasLong = 1; // laser len time in steps

state = PLAYER_STATES.__IDLE;

// control
mycmp = 0;
controlBit = CONTROL.__KEYMOUSE //| CONTROL.__GAMEPAD;
key[KEY.CNT] = 0;


pickupId = noone;

// movement trics
hmove = 0;
vmove = 0;

// mask
kx1 = 0;
ky1 = 0;
kx2 = 0;
ky2 = 0;

// abilities
psysfloor = global.pse;

abilCount = 0;
abils[0] = 0;
abilsTmr[0] = -1;
abilsTmrCnt[0] = -1;
abilsIco[0] = 0;
abilsParams[0] = 0;

// single use
singleuse = SINGLEUSE.__NONE;
singleusePar[0] = 0;
// 0 - image_index

// rechargable
rechargable = RECHARGABLE.__NONE;
rechargablePar[0] = 0; // 0 - GUI image_index

// SPECIAL
infAmmoTmr = -1;
SPECIAL_FLAGS = 0;

// laser list
longbulls = ds_list_create();

// gui 
pwId = noone;
pwType = "";
pwName = "";
pwc = c_white;


// mouse y old
myo = mouse_y;


instance_create(x, y, oCamera);
var ggui = instance_create(0, 0, oGameGUI);
ggui = oGameGUI.playerId;
instance_create(0, 0, oShadower);


playerSetWeapon(weapon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// clear 
for (var i = 0; i &lt; abilCount; i++)
{
    switch (abils[i])
    {
    case ABILITIES.__DASH:
        // clear the emitter
        part_emitter_destroy(global.pse, abilsParams[2]);
        break;
    }
}

// clear controlled projectile lines
ds_list_destroy(longbulls);

abils = 0;
abilsTmr = 0;
abilsTmrCnt = 0;
abilsIco = 0;
abilsParams = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon update
if (!updatable)
    exit;
weaponObj.x = x + weaponXoff * sign(xsc);
weaponObj.y = y + weaponYoff;
//weaponObj.depth = depth;
if (weapon != WEAPONS.__NONE)
{
    switch (weaponType)
    {
    case WEAPON_TYPE.__MELEE:
        switch (weaponObj.attackType)
        {
        default:
            weaponObj.x = x + weaponXoff * sign(xsc); //lengthdir_x(weaponXoff * sign(xsc), mousedir);
            weaponObj.y = y + weaponYoff; //lengthdir_y(weaponYoff, mousedir);
            if (weaponObj.state == WEAPON_STATES.__MOVE)
            {
                var perc = anAngle / anMaxAngle;
                with(weaponObj)
                    image_angle = perc * anMaxAngle;
            }                
            weaponObj.xsc = xsc;
            break;
            
        }
        break;
        
    case WEAPON_TYPE.__RANGE:
        weaponObj.image_yscale = sign(xsc);
        weaponObj.image_angle = mousedir + sin(anSinRad) * weaponObj.anMaxAngle; //+ weaponInf[W_PR.__LDIR_DIR] / 4 * (sign(xsc) &gt; 0)
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
depth = -y;

hmove = 0;
vmove = 0;

if (cuckTmr &amp;&amp; !--cuckTmr)
{
    cuckTmr = -1;
}

// infinite ammo
if (infAmmoTmr &amp;&amp; !--infAmmoTmr)
{
    infAmmoTmr = -1;
    SPECIAL_FLAGS &amp;= ~SPECIAL.__INF_AMMO;
}

hp = median(0, hp, _hp);

weaponSpriteIfNoAmmo();
weaponRestore();
masksMove();
playerAbilitiesCooldown();
playerRechargableCooldown();
playerControlledLineProceedAll();

// map
minimapUpdate();
if (key[KEY.MAP])
    minimapBigger();
else
    minimapSmaller();
    
// going into room
playerComeIntoRoom();
    
switch (state)
{
/* *********************************************** IDLE *********************************************** */
case PLAYER_STATES.__IDLE:
    procedureAnimableApproachReset();
    playerRotateToMouse();
    
    physicalBeginStep();
    playerGetKeys();
    
    physicalApplyRecoil(recoilSpd, mousedir - 180);
    
    if ((key[KEY.LEFT] ^^ key[KEY.RIGHT]) || (key[KEY.TOP] ^^ key[KEY.BOT]))
        playerSetState(PLAYER_STATES.__WALK);
    var can = playerCanShoot();
    if (can == 1)
        playerAttack(1);
    else
    {
        if ((can == -2 &amp;&amp; weaponInf[W_PR.__SCORE_SIZE] == weaponInf[W_PR.__BULLETS_PER_SHOT] &amp;&amp; !restoreWeap)
            || (can == -2 /*&amp;&amp; key[KEY.KICK] == 1*/ &amp;&amp; key[KEY.KICK] == weaponInf[W_PR.__BUTTON_STATE] &amp;&amp; !restoreWeap))
            key[KEY.RELOAD] = 1;
        debugWrite("Cannot shoot, reason: " + string(can));  
    }
    
    playerPickup();
    
    var abilUse = playerAbilityKeyCheck();
    if (abilUse == 1)
    {
        playerAbilityUse(0);
        exit;
    }
    
    if (key[KEY.SINGLEUSE_ITEM])
    {
        playerSingleuseUse();
        exit;
    } 
       
    if (key[KEY.RECHARGABLE_ITEM])
    {
        playerRechargableUse();
        exit;
    }
    
    if (key[KEY.RELOAD])
        playerReload();
    if (key[KEY.WEAP_CHANGE])
        playerChangeWeapon();
        
    physicalMove(collideWith);
    break;
    
/* *********************************************** WALK *********************************************** */
case PLAYER_STATES.__WALK:
    procedureAnimableProceed();    
    playerRotateToMouse();
    
    physicalBeginStep();
    playerGetKeys();
    
    physicalApplyRecoil(recoilSpd, mousedir - 180);
    
    if (key[KEY.LEFT])
        hmove--;
    if (key[KEY.RIGHT])
        hmove++;
    if (key[KEY.TOP])       
        vmove--; 
    if (key[KEY.BOT])
        vmove++;
    if ((vmove == 0 &amp;&amp; hmove == 0)
        || ((key[KEY.TOP] &amp;&amp; key[KEY.BOT]) || (key[KEY.LEFT] &amp;&amp; key[KEY.RIGHT])))
    {
        playerSetState(PLAYER_STATES.__IDLE);
        exit;
    }
    var can = playerCanShoot();
    if (can == 1)
        playerAttack(1);
    else
        if ((can == -2 &amp;&amp; weaponInf[W_PR.__SCORE_SIZE] == weaponInf[W_PR.__BULLETS_PER_SHOT] &amp;&amp; !restoreWeap)
            || (can == -2 /*&amp;&amp; key[KEY.KICK] == 1*/ &amp;&amp; key[KEY.KICK] == weaponInf[W_PR.__BUTTON_STATE] &amp;&amp; !restoreWeap))
            key[KEY.RELOAD] = 1;
    else
        debugWrite("Cannot shoot, reason: " + string(can));   
        
    if (key[KEY.PICKUP])
    {
        playerPickup(pickupId);
    }
    if (key[KEY.RELOAD])
        playerReload();
    if (key[KEY.WEAP_CHANGE])
        playerChangeWeapon();
        
    playerPickup();
    
    if (key[KEY.SINGLEUSE_ITEM])
    {
        playerSingleuseUse();
        exit;
    }    
    
    if (key[KEY.RECHARGABLE_ITEM])
    {
        playerRechargableUse();
        exit;
    }
    
    var abilUse = playerAbilityKeyCheck();
    if (abilUse == 1)
    {
        playerAbilityUse(0);
        exit;
    }
    
    hspd += spd * speedmod * hmove;
    vspd += spd * speedmod * vmove;
    physicalMove(collideWith);
    break;
    
// **************************************************************************************************** 
// ****************************************   ABILITIES   ********************************************* 
// **************************************************************************************************** 

/* *********************************************** DASH *********************************************** */
case PLAYER_STATES.__DASH:
    playerRotateToMouse();
    
    physicalBeginStep();
    playerGetKeys();
                
    playerPickup();
    
    
    
    var toX = x,
        toY = y;
    
    var dSpd = abilsParams[1],
        dist = distance_to_point(mX, mY);
    var finspd = max(dist / 5, dSpd);
    if (dist &lt; finspd)
    {
        // end
        x = mX;
        y = mY;        
        anAngle = 0;
        playerSetState(PLAYER_STATES.__IDLE); 
        exit;    
    }
    else
    {            
        toX = round(x + lengthdir_x(finspd, mD));
        toY = round(y + lengthdir_y(finspd, mD));
    }
    if (is_array(lineGetCollisionPoint(x, y, toX, toY, collideWith, 1)))// collisionLine(x, y, toX, toY, collideWith)) // cannot
    {
        // end       
        anAngle = 0;
        playerSetState(PLAYER_STATES.__IDLE); 
        exit;        
    }
    // move to the point
    var ab = abs(toX - x),
        si = sign(toX - x);
    // x axis
    repeat (ab)
    {
        if (colPlaceFree(x + si, y, collideWith))
            x += si;
        else
        {
            // end       
            playerSetState(PLAYER_STATES.__IDLE); 
            exit;    
        }
    }
    // y axis
    ab = abs(toY - y);
    si = sign(toY - y);
    repeat (ab)
    {
        if (colPlaceFree(x, y + si, collideWith))
            y += si;
        else
        {
            // end       
            anAngle = 0;
            playerSetState(PLAYER_STATES.__IDLE); 
            exit;    
        }
    }
    mD = point_direction(x, y, mX, mY);
    // effect
    part_emitter_region(psysfloor, abilsParams[2], x-1, x+1, y-1, y+1, ps_shape_diamond, ps_distr_invgaussian);
    part_emitter_burst(psysfloor, abilsParams[2], global.pldash, irandom_range(2, 4)); 
    break;

/* *********************************************** CUCKED *********************************************** */
case PLAYER_STATES.__CUCKED:
    break;    
    
/* *********************************************** DIE *********************************************** */
case PLAYER_STATES.__DIE:

    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawable)
    exit;
if (!updatable)
    mycmp = myo;


if (mycmp &lt; y)
{
    with (weaponObj)
        event_perform(ev_other, ev_user3);
    procedureAnimableDrawPerson();
}   
else
{
    procedureAnimableDrawPerson();
    with (weaponObj)
        event_perform(ev_other, ev_user3);
}

playerDebug();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
