<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oDynamicObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

// Stats
hp = 6;
_hp = 12;

canAttack = 1;
canAttackTmr = -1;

mousedir = 0;


ammo[AMMO.__CNT - 1] = 0; // ammo we have right now

weaponObj = instance_create(x, y, oPlayerWeapon);
weapon = WEAPONS.__NONE;
weaponType = WEAPON_TYPE.__RANGE;
weaponInf = -1;
weaponAmmo = 0;

weaponBack = WEAPONS.__NONE;
weaponBackAmmo = 0;
// weapon animation
weaponSpr = -1;
weaponAnimSpd = 0;
weaponAngle = 0;
weaponMaxAngle = 6;
weaponSinStep = 4;
weaponSprite[2] = -1;
weaponImage = 0;
weaponAnimSpeed[2] = 0;
weaponXoff = 0;
weaponYoff = 0;
weaponBlend = c_white;

state = PLAYER_STATES.__IDLE;

key[KEY.CNT] = 0;


pickupId = noone;


instance_create(x, y, oCamera);
instance_create(0, 0, oGameGUI);

playerSetWeapon(weapon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
depth = -y;

pickupId = noone;

if (canAttackTmr &amp;&amp; !-canAttackTmr)
{
    // can attack again
    canAttack = 1;
}

switch (state)
{
case PLAYER_STATES.__IDLE:
    procedureAnimableApproachReset();
    procedureAnimateWeapon();
    playerRotateToMouse();
    playerGetInteractable();
    
    physicalBeginStep();
    playerGetKeys();
    if (key[KEY.LEFT] || key[KEY.RIGHT] || key[KEY.TOP] || key[KEY.BOT])
        playerSetState(PLAYER_STATES.__WALK);
    if (key[KEY.KICK])
    {
        var can = playerCanShoot();
        if (can)
            playerSetState(PLAYER_STATES.__ATTACK);
        else
            debugWrite("Cannot shoot, reason: " + string(can));
    }   
    if (key[KEY.PICKUP])
    {
        playerPickup(pickupId);
    }
    break;

case PLAYER_STATES.__WALK:
    procedureAnimableProceed();    
    playerRotateToMouse();
    procedureAnimateWeapon();
    playerGetInteractable();
    
    physicalBeginStep();
    playerGetKeys();
    if (key[KEY.LEFT])
    {
        hspd -= spd * speedmod;
    }
    if (key[KEY.RIGHT])
    {
        hspd += spd * speedmod;
    }
    if (key[KEY.TOP])
    {        vspd -= spd * speedmod;
    }
    if (key[KEY.BOT])
    {
        vspd += spd * speedmod;
    }
    if (vspd == 0 &amp;&amp; hspd == 0)
        playerSetState(PLAYER_STATES.__IDLE);
        
    if (key[KEY.PICKUP])
    {
        playerPickup(pickupId);
    }
    
    physicalMove();
    break;
    
case PLAYER_STATES.__ATTACK_SHOOT_ANIM:
    if (weaponImage == sprite_get_number(weaponSpr))
    {
        if (weaponSprite[2] != -1)
            playerSetState(PLAYER_STATES.__ATTACK_SHOOT_RETURN);
        else
            playerSetState(PLAYER_STATES.__WALK * (hspd != 0 || vspd != 0) + PLAYER_STATES.__IDLE * (hspd == 0 &amp;&amp; vspd == 0));
        exit;
    }
    weaponImage += weaponAnimSpd;
    physicalMove();
    break;
    
case PLAYER_STATES.__DIE:

    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch (state)
{
case PLAYER_STATES.__DIE:

    break;
    
default:
    if (weapon != WEAPONS.__NONE)
    {
        switch (weaponType)
        {
        case WEAPON_TYPE.__MELEE:
            if (mouse_y &lt; y)
            {
            draw_sprite_ext(weaponSpr, weaponImage, x + weaponXoff * sign(image_xscale), y + weaponYoff, image_xscale, image_yscale, weaponAngle, weaponBlend, image_alpha);             
            procedureAnimableDrawPerson();
            }
            else
            {
            procedureAnimableDrawPerson();
            draw_sprite_ext(weaponSpr, weaponImage, x + weaponXoff * sign(image_xscale), y + weaponYoff, image_xscale, image_yscale, weaponAngle, weaponBlend, image_alpha);             
            }
            break;
        case WEAPON_TYPE.__RANGE:
            if (weaponAngle &gt; 0 &amp;&amp; weaponAngle &lt; 180)
            {
                draw_sprite_ext(weaponSpr, weaponImage, x + weaponXoff * sign(image_xscale), y + weaponYoff, 1, sign(image_xscale), weaponAngle, weaponBlend, image_alpha);                 
                procedureAnimableDrawPerson();
            }   
            else
            {
                procedureAnimableDrawPerson();
                draw_sprite_ext(weaponSpr, weaponImage, x + weaponXoff * sign(image_xscale), y + weaponYoff, 1, sign(image_xscale), weaponAngle, weaponBlend, image_alpha);                             
            }
            break;
        }
    }
    else 
        procedureAnimableDrawPerson();
    break;
}

playerDebug();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
