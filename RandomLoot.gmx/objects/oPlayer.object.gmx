<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oDynamicObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

// Stats
spd = 4;
hp = 12;
_hp = 12;

anMaxAngle = 6;

mousedir = 0;

restoreWeap = 0;
restore = -1;

recoilSpd = 0;
recoilApply = 0;

cannot = 0;

ammo[AMMO.__CNT - 1] = 0; // ammo we have right now
ammoMax[AMMO.__CNT - 1] = 300;
for (var i = 0; i &lt; AMMO.__CNT; i++)
    ammoMax[i] = 1000;
ammoMax[AMMO.__BULLET] = 300;
ammoMax[AMMO.__SHOTGUN] = 100;
ammoMax[AMMO.__SHOTGUN] = 100;
ammoMax[AMMO.__GRENADES] = 65;
ammoMax[AMMO.__ENERGY] = 500;


for (var i = 0; i &lt; AMMO.__CNT; i++)
    ammo[i] = ammoMax[i];
    
weaponCd = 0;

weaponObj = instance_create(x, y, oPlayerWeapon);
weapon = WEAPONS.__NONE;
weaponType = WEAPON_TYPE.__RANGE;
weaponInf = -1;
weaponAmmo = 0;

weaponSprite[2] = -1;
weaponAnimSpeed[2] = 0;

weaponBack = WEAPONS.__NONE;
weaponBackAmmo = 0;
weaponXoff = 0;
weaponYoff = 0;
weaponBlend = c_white;

expRad = 0;

state = PLAYER_STATES.__IDLE;

key[KEY.CNT] = 0;


pickupId = noone;

// movement trics
hmove = 0;
vmove = 0;

// mask
kx1 = 0;
ky1 = 0;
kx2 = 0;
ky2 = 0;

// gui 
pwId = noone;
pwType = "";
pwName = "";
pwc = c_white;

playerMaskCreate(0);


instance_create(x, y, oCamera);
instance_create(0, 0, oGameGUI);

playerSetWeapon(weapon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon update
if (!updatable)
    exit;
weaponObj.x = x + weaponXoff * sign(xsc);
weaponObj.y = y + weaponYoff;
//weaponObj.depth = depth;
if (weapon != WEAPONS.__NONE)
{
    switch (weaponType)
    {
    case WEAPON_TYPE.__MELEE:
        switch (weaponObj.attackType)
        {
        default:
            weaponObj.x = x + weaponXoff * sign(xsc); //lengthdir_x(weaponXoff * sign(xsc), mousedir);
            weaponObj.y = y + weaponYoff; //lengthdir_y(weaponYoff, mousedir);
            if (weaponObj.state == WEAPON_STATES.__MOVE)
            {
                var perc = anAngle / anMaxAngle;
                with(weaponObj)
                    image_angle = perc * anMaxAngle;
            }
                
            weaponObj.xsc = xsc;
            /*if (mouse_y &lt; y)
            {
                weaponObj.depth = depth + 1;
            }
            else
            {
                weaponObj.depth = depth - 1;
            }*/
            break;
            
        }
        break;
        
    case WEAPON_TYPE.__RANGE:
        weaponObj.image_yscale = sign(xsc);
        weaponObj.image_angle = mousedir + sin(anSinRad) * weaponObj.anMaxAngle; //+ weaponInf[W_PR.__LDIR_DIR] / 4 * (sign(xsc) &gt; 0)
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
depth = -y;

hmove = 0;
vmove = 0;

if (cuckTmr &amp;&amp; !--cuckTmr)
{
    cuckTmr = -1;
}

weaponRestore();
masksMove();

switch (state)
{
case PLAYER_STATES.__IDLE:
    procedureAnimableApproachReset();
    playerRotateToMouse();
    
    physicalBeginStep();
    playerGetKeys();
    
    physicalApplyRecoil(recoilSpd, mousedir - 180);
    
    
    if ((key[KEY.LEFT] ^^ key[KEY.RIGHT]) || (key[KEY.TOP] ^^ key[KEY.BOT]))
        playerSetState(PLAYER_STATES.__WALK);
    var can = playerCanShoot();
    if (can == 1)
        playerAttack(1);
    else
    {
        if ((can == -2 &amp;&amp; weaponInf[W_PR.__SCORE_SIZE] == 1 &amp;&amp; !restoreWeap)
            || (can == -2 &amp;&amp; key[KEY.KICK] == 1 &amp;&amp; !restoreWeap))
            key[KEY.RELOAD] = 1;
        debugWrite("Cannot shoot, reason: " + string(can));  
    }
    
    playerPickup();
    
    if (key[KEY.RELOAD])
        playerReload();
    if (key[KEY.WEAP_CHANGE])
        playerChangeWeapon();
        
    physicalMove(collideWith);
    break;

case PLAYER_STATES.__WALK:
    procedureAnimableProceed();    
    playerRotateToMouse();
    
    physicalBeginStep();
    playerGetKeys();
    
    physicalApplyRecoil(recoilSpd, mousedir - 180);
    
    if (key[KEY.LEFT])
        hmove--;
    if (key[KEY.RIGHT])
        hmove++;
    if (key[KEY.TOP])       
        vmove--; 
    if (key[KEY.BOT])
        vmove++;
    if ((vmove == 0 &amp;&amp; hmove == 0)
        || ((key[KEY.TOP] &amp;&amp; key[KEY.BOT]) || (key[KEY.LEFT] &amp;&amp; key[KEY.RIGHT])))
    {
        playerSetState(PLAYER_STATES.__IDLE);
        exit;
    }
    var can = playerCanShoot();
    if (can == 1)
        playerAttack(1);
    else
        if ((can == -2 &amp;&amp; weaponInf[W_PR.__SCORE_SIZE] == 1 &amp;&amp; !restoreWeap)
            || (can == -2 &amp;&amp; key[KEY.KICK] == 1 &amp;&amp; !restoreWeap))
            key[KEY.RELOAD] = 1;
    else
        debugWrite("Cannot shoot, reason: " + string(can));   
        
    if (key[KEY.PICKUP])
    {
        playerPickup(pickupId);
    }
    if (key[KEY.RELOAD])
        playerReload();
    if (key[KEY.WEAP_CHANGE])
        playerChangeWeapon();
        
    playerPickup();
    
    hspd += spd * speedmod * hmove;
    vspd += spd * speedmod * vmove;
    physicalMove(collideWith);
    break;

case PLAYER_STATES.__CUCKED:
    break;    
    
case PLAYER_STATES.__DIE:

    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawable)
    exit;
if (mouse_y &lt; y)
{
    with (weaponObj)
        event_perform(ev_other, ev_user3);
    procedureAnimableDrawPerson();
}   
else
{
    procedureAnimableDrawPerson();
    with (weaponObj)
        event_perform(ev_other, ev_user3);
}
if (cannot &amp; CANNOT.WALL)
    draw_sprite_ext(sWarnings, 1, x, y - sprite_height - 3, 1, 1, 0, image_blend, image_alpha);
playerDebug();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
