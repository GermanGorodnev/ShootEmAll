<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sRockerGuitarBack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseEnemyWeaponed</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

spd = 2;
vecdir = 1;
anMaxAngle = 3;
anSinStep = 6;
anMaxH = 2;
dir = 0; // 0 - right

hp = 35;
_hp = 35;

_angle = 0;
STATE_CHANGE_TMR = 3 * room_speed;

// weapon
weapon = ENEMY_WEAPON.__ROCKER_MINIGUN;
weaponType = WEAPON_TYPE.__RANGE;
projectile = PROJECTILE.__ENEMY_BULLET;
enemyType = ENEMY.__BOSS_ROCKER;
weaponXoff = 0;
weaponYoff = 0;

// SECOND WEAPON
weapon2 = ENEMY_WEAPON.__ROCKER_MINIGUN;
weapon2Type = WEAPON_TYPE.__RANGE;
projectile2 = PROJECTILE.__ENEMY_BULLET_UZI;
weapon2Xoff = 0;
weapon2Yoff = 0;

dist = 800;
weaponAttDist = 600;
retreatDist = 0; // no mercy

weaponObj = instance_create(x, y, oRockerWeapon);
weaponObj.parent = id;
enemyWeaponInit(weapon);

weaponObj2 = noone;

moneydead = 400;

maskHitAdd(23, 34, 61, 107, 1);

anims[ENEMY_ANIM.__IDLE] = sprite_index;
anims[ENEMY_ANIM.__WALK] = sprite_index;
anims[ENEMY_ANIM.__CUCKED] = sprite_index;

target = instance_nearest(x, y, oPlayer);

updatable = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with(weaponObj)
    instance_destroy();
with(weaponObj2)
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon update
if (!updatable)
    exit;
weaponObj.x = x + weaponXoff * sign(xsc);
weaponObj.y = y + weaponYoff;
if (weapon != WEAPONS.__NONE)
{
    switch (weaponType)
    {
    case WEAPON_TYPE.__MELEE:
        /*if (weaponObj.state == WEAPON_STATES.__MOVE)
        {
            var perc = anAngle / anMaxAngle;
            with(weaponObj)
                image_angle = perc * anMaxAngle;
        }
        weaponObj.xsc = xsc;*/
        break;
    case WEAPON_TYPE.__RANGE:
        weaponObj.image_yscale = -(angle == median(90, angle, 270)) + (angle &lt; 90 || angle &gt; 270);
        weaponObj.image_angle = angle + sin(anSinRad) * weaponObj.anMaxAngle;
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
cacheUpdate();  

depth = -y;

hp = clamp(hp, 0, _hp);
if (hp &lt;= 0 &amp;&amp; state &gt;= 0)
{
    rockerSetState(ENEMY_STATE.__DIE);
}
if (whiteTmr &amp;&amp; !--whiteTmr)
{}

idleTmr++;

if (current_time % 4 == 0)
    enemyMoveOutOfOther();
enemyDebuffsProceed();
masksMove();


rockerAnimsControl();


/* ******************** S T A T E *********************** */
switch (state)
{
case ENEMY_STATE.__ROCKER_MINIGUN_1:
    procedureAnimableApproachReset();

    if (STATE_CHANGE_TMR &amp;&amp; !--STATE_CHANGE_TMR)
    {
        // set new state
        rockerStartNewPattern();
        exit;
    }

    angle = (angle + 1.3) % 360;
    dir = round(angle / 90);
    // well, maybe shoot
    if (enemyCanAttack())
        enemyAttack();
    break;
    
case ENEMY_STATE.__ROCKER_MINIGUN_2:
    procedureAnimableApproachReset();

    if (STATE_CHANGE_TMR &amp;&amp; !--STATE_CHANGE_TMR)
    {
        // set new state
        rockerStartNewPattern();
        exit;
    }

    angle = _angle + sin(round(get_timer() / 1000) / 300) * 25;
    dir = round(angle / 90);
    // well, maybe shoot
    if (enemyCanAttack())
        enemyAttack();
    break;
        
case ENEMY_STATE.__ROCKER_MOLOTOV_1:
    procedureAnimableApproachReset();
    xsc = (target.x &gt; x) * 2 - 1;
    var pdir = point_direction(x, y, target.x, target.y);
    angle = pdir + sin(get_timer() / 300) * 25;        
    dir = round(pdir / 90);
    STATE_CHANGE_TMR--;
    if (STATE_CHANGE_TMR &lt; 25) // throw
    {
        enemyAttack();
        rockerStartNewPattern();
    }        
    break;
    
case ENEMY_STATE.__ROCKER_WALL_MINIGUN_1:
    procedureAnimableProceed(); 
    physicalBeginStep();
       
    if (STATE_CHANGE_TMR &amp;&amp; !--STATE_CHANGE_TMR)
    {
        // set new state
        rockerStartNewPattern();
        exit;
    }
        
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    if (done)
    {
        // wow we're actually done
        if (path_get_number(path) == 0)
            rockerStartNewPattern();
        else
            enemyGetNextPathPoint();
        //exit;
    } 

        physicalApplyRecoil(recoilSpd, recoilDir); 
    
    if (enemyCanAttack())
    {
        angle = point_direction(x, y, target.x, target.y);        
        dir = round(angle / 90);
        enemyFullRotateAndAttack();
        exit;
    }
    
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__IDLE:
    procedureAnimableApproachReset();
    physicalBeginStep();
    
    physicalApplyRecoil(recoilSpd, recoilDir); 
        
    if (STATE_CHANGE_TMR &amp;&amp; !--STATE_CHANGE_TMR)
    {
        // set new state
        rockerStartNewPattern();
        exit;
    }

    if (weapon == ENEMY_WEAPON.__ROCKER_MINIGUN
        || weapon == ENEMY_WEAPON.__ROCKER_UZI)
    {
        xsc = (target.x &gt; x) * 2 - 1;
        angle = point_direction(x, y, target.x, target.y);        
        dir = round(angle / 90);
    }
    // well, maybe shoot
    var ca = enemyCanAttack();
    if (ca == 1)
        enemyFullRotateAndAttack();
    else if (ca == -1)    
        rockerStartPattern(ENEMY_PATTERN.__FOLLOW, target);
    physicalMove(collideWith);
    break;
    
    
    
    
case ENEMY_STATE.__FOLLOW:
    procedureAnimableProceed(); 
    physicalBeginStep();
       
    if (STATE_CHANGE_TMR &amp;&amp; !--STATE_CHANGE_TMR)
    {
        // set new state
        rockerStartNewPattern();
        exit;
    }
        
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    enemySetDirByMoving();
    if (done)
    {
        // wow we're actually done
        if (path_get_number(path) == 0)
            rockerSetState(ENEMY_STATE.__IDLE);
        else
            enemyGetNextPathPoint();
        //exit;
    } 
    
    targetDist = distance_to_object(target);

    physicalApplyRecoil(recoilSpd, recoilDir); 

    if (targetDist &lt;= weaponAttDist)
    {
        // wow we're actually done
        if (enemyCanAttack())
        {
            enemyFullRotateAndAttack();
            switch (weapon)
            {
            case ENEMY_WEAPON.__ROCKER_GUITAR:
                rockerSetState(ENEMY_STATE.__IDLE);
            }
            exit;
        }
    }
    
    angle = point_direction(x, y, target.x, target.y);        
    
    if (point_distance(path_get_point_x(path, path_get_number(path)-1), path_get_point_y(path, path_get_number(path)-1), target.x, target.y) &gt; weaponAttDist)
    {
        if (idleTmr &gt; 1 * room_speed)
        {
            // recalc
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, target);        
        }
    }
    
    physicalMove(collideWith);
    break;    
    
    
    
    
case ENEMY_STATE.__WALK:
    procedureAnimableProceed();    
    physicalBeginStep();
    
    //setSprIfNotSet(anims[ENEMY_ANIM.__WALK], 0);
    
    enemySetDirByMoving();
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    if (enemyMoveToPointDone(done))
    {
        // wow we're actually done
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    
    physicalApplyRecoil(recoilSpd, recoilDir);
    detect = enemyDetectPlayer();
    if (detect == 1)
    {
        // well, maybe shoot
        if (enemyCanAttack())
        {
            enemyFullRotateAndAttack();
            exit;
        }
        enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
    }
    
    if (!colPlaceFree(x + hspd, y + vspd, collideWith))
    {
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__ATTACK:
    procedureAnimableApproachReset();        
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__CUCKED:
    procedureAnimableApproachReset();        
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    if (cuckTmr &amp;&amp; !--cuckTmr)
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__DIE:
    anAngle = 90;
    depth = 100;
    if (destrTmr &amp;&amp; !--destrTmr)
    {
        instance_destroy();
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fight start
target = instance_nearest(x, y, oPlayer);
rockerStartNewPattern();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawable)
    exit;
enemyDebug();

var usesh = whiteTmr != 0;
if (usesh)
    shader_set(shdWhite);

if (vecdir &lt; 0)
{
    with (weaponObj)
        event_perform(ev_other, ev_user3);
    procedureAnimableDrawPerson();
}   
else
{
    procedureAnimableDrawPerson();
    with (weaponObj)
        event_perform(ev_other, ev_user3);
}

shader_reset();

enemyDrawBase();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
