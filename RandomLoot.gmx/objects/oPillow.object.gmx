<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemyPillow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseEnemyWeaponed</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

spd = 1;
vecdir = 1;
anMaxAngle = 3;
anSinStep = 6;
anMaxH = 2;

hp = 20;
_hp = 20;

// weapon
weapon = ENEMY_WEAPON.__MACHINEGUN;
weaponType = WEAPON_TYPE.__RANGE;
projectile = PROJECTILE.__ENEMY_BULLET;
enemyType = ENEMY.__PILLOW;
weaponXoff = 0;
weaponYoff = 0;


weaponObj = instance_create(x, y, oEnemyWeapon);
weaponObj.parent = id;
var ww = weapon;
enemyWeaponInit(ww);
maskHitAdd(7, 6, 36, 53, 1);

anims[ENEMY_ANIM.__IDLE] = sprite_index;
anims[ENEMY_ANIM.__WALK] = sprite_index;
anims[ENEMY_ANIM.__CUCKED] = sEnemyPillowCucked;
enemySetState(ENEMY_STATE.__IDLE);
//enemyStartPattern(ENEMY_PATTERN.__PATROL);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with(weaponObj)
    instance_destroy();
repeat(2)
{
    gameBueAdd(x + irandom_range(-7, 7), y + irandom_range(-3, 3), 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon update
if (!updatable)
    exit;
weaponObj.x = x + weaponXoff * sign(xsc);
weaponObj.y = y + weaponYoff;
if (weapon != WEAPONS.__NONE)
{
    switch (weaponType)
    {
    case WEAPON_TYPE.__MELEE:
        if (weaponObj.state == WEAPON_STATES.__MOVE)
        {
            var perc = anAngle / anMaxAngle;
            with(weaponObj)
                image_angle = perc * anMaxAngle;
        }
        weaponObj.xsc = xsc;
        break;
    case WEAPON_TYPE.__RANGE:
        weaponObj.image_yscale = -(angle == median(90, angle, 270)) + (angle &lt; 90 || angle &gt; 270);
        weaponObj.image_angle = angle + sin(anSinRad) * weaponObj.anMaxAngle;
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
depth = -y;

hp = clamp(hp, 0, _hp);
if (hp &lt;= 0 &amp;&amp; state &gt;= 0)
{
    enemySetState(ENEMY_STATE.__DIE);
}

idleTmr++;

enemyMoveOutOfOther();

masksMove();

switch (state)
{
case ENEMY_STATE.__IDLE:
    procedureAnimableApproachReset();
    physicalBeginStep();
    detect = enemyDetectPlayer();
    if (detect)
    {
        // well, maybe shoot
        var ca = enemyCanAttack();
        if (ca == 1)
        {
            enemyAttack();
            enemySetState(ENEMY_STATE.__IDLE);
            exit;
        }
        // now we follow the player
        else if (ca == -1)
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
    }
    if (target != noone)
    {
        angle = point_direction(x, y, target.x, target.y);        
        if (idleTmr &gt; 2 * room_speed)
        {
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
        }
    }
    break;
    
case ENEMY_STATE.__FOLLOW:
    procedureAnimableProceed();    

    targetDist = distance_to_object(target);
    
    xsc = (oPlayer.x &gt; x) * 2 - 1;
    
    if (targetDist &lt;= weaponAttDist)
    {
        // wow we're actually done
        enemySetState(ENEMY_STATE.__IDLE);
        exit;
    }
    detect = enemyDetectPlayer();
    // well, maybe shoot
    if (enemyCanAttack() == 1)
    {
        enemyAttack();
        enemySetState(ENEMY_STATE.__IDLE);
        exit;
    }
    if (point_distance(path_get_point_x(path, path_get_number(path)-1), path_get_point_y(path, path_get_number(path)-1), target.x, target.y) &gt; weaponAttDist)
    {
        if (idleTmr &gt; 0.5 * room_speed)
        {
            // recalc
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, target);        
        }
    }
    if (detect == -2)
    {
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    if (pathEnd)
    {
        // wow we're actually done
        enemySetState(ENEMY_STATE.__IDLE);
        exit;    
    }
    break;    
    
case ENEMY_STATE.__WALK:
    procedureAnimableProceed();    
    physicalBeginStep();
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    if (done)
    {
        // wow we're actually done
        enemySetState(ENEMY_STATE.__IDLE);
        exit;
    }
    detect = enemyDetectPlayer();
    if (detect == 1)
    {
        enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
        // well, maybe shoot
        /*if (enemyCanAttack())
        {
            enemyAttack();
        }*/
    }
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__ATTACK:
    procedureAnimableApproachReset();        
    break;
    
case ENEMY_STATE.__CUCKED:
    if (cuckTmr &amp;&amp; !--cuckTmr)
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
    break;
    
case ENEMY_STATE.__DIE:
    anAngle = 90;
    depth = 100;
    if (destrTmr &amp;&amp; !--destrTmr)
    {
        instance_destroy();
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
path_speed = spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause
path_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawable)
    exit;
enemyDebug();
if (vecdir &lt; 0)
{
    with (weaponObj)
        event_perform(ev_other, ev_user3);
    procedureAnimableDrawPerson();
}   
else
{
    procedureAnimableDrawPerson();
    with (weaponObj)
        event_perform(ev_other, ev_user3);
}
switch (state)
{
case ENEMY_STATE.__IDLE: draw_text(bbox_right, y - 20, "Idle"); break;
case ENEMY_STATE.__WALK: draw_text(bbox_right, y - 20, "Walk"); break;
case ENEMY_STATE.__FOLLOW: draw_text(bbox_right, y - 20, "Follow"); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
