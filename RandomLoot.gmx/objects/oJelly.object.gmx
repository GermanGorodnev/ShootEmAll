<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sJellyIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseEnemyMeleeSelf</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

spd = 1;
vecdir = 1;
anMaxAngle = 3;
anSinStep = 6;
anMaxH = 2;

hp = 200;
_hp = hp;

// weapon
weapon = ENEMY_WEAPON.__SELF;
weaponType = WEAPON_TYPE.__MELEE;

canAttack = 1;
canAttackTmr = 0;

enemyType = ENEMY.__JELLY;
weaponXoff = 0;
weaponYoff = 0;

dist = 250;
weaponAttDist = 35;

kx1 = 85;
ky1 = 10;
kx2 = 130;
ky2 = 88;

mindmg = 1;
maxdmg = 2;
maskHitAdd(15, 15, 95, 92, 1);

anims[ENEMY_ANIM.__IDLE] = sprite_index;
anims[ENEMY_ANIM.__WALK] = sJellyMove;
anims[ENEMY_ANIM.__ATTACK] = sJellyAttack;
anims[ENEMY_ANIM.__CUCKED] = sprite_index;
anims[ENEMY_ANIM.__DIE] = sJellyDead;

animSpd[ENEMY_ANIM.__ATTACK] = 0.15;
animSpd[ENEMY_ANIM.__DIE] = 0.3;

enemyStartPattern(ENEMY_PATTERN.__PATROL);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//with(weaponObj)
//    instance_destroy();
// add some bue
repeat(irandom_range(4, 7))
{
    gameBueAdd(x + irandom_range(-38, 38), y + irandom_range(-22, 20), 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatable)
    exit;
    
depth = -y;

hp = clamp(hp, 0, _hp);
if (hp &lt;= 0 &amp;&amp; state &gt;= 0)
{
    enemySetState(ENEMY_STATE.__DIE);
}

if (sprite_index != -1)
{
    // accumulate custom image_index
    customAnimableProceed();
}   

idleTmr++;

if (whiteTmr &amp;&amp; !--whiteTmr)
{}

if (canAttackTmr &amp;&amp; !--canAttackTmr)
{
    canAttackTmr = -1;
    canAttack = 1;
}

if (current_time % 4 == 0)
    enemyMoveOutOfOther();
enemyDebuffsProceed();
masksMove();

switch (state)
{
case ENEMY_STATE.__IDLE:
    procedureAnimableApproachReset();
    physicalBeginStep();
    
    physicalApplyRecoil(recoilSpd, recoilDir);
    
    detect = enemyDetectPlayer();
    if (detect == 1)
    {
        // well, maybe shoot
        var ca = enemyCanAttack();
        if (ca)
        {
            enemyAttack();
            exit;
        }
        else if ( ca == -1 )
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
    }
    
    if (patrolTmr &amp;&amp; !--patrolTmr)
    {
        enemyStartPattern(ENEMY_PATTERN.__PATROL)    
    }   

    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__FOLLOW:
    procedureAnimableProceed();   
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    if (done)
    {
        // wow we're actually done
        if (path_get_number(path) == 0)
            enemySetState(ENEMY_STATE.__IDLE);
        else
            enemyGetNextPathPoint();
    }
    
    xsc = (oPlayer.x &gt; x) * 2 - 1;
    targetDist = distance_to_object(target);

    if (enemyCanAttack())
    {
        enemyAttack();
        exit;
    }
    detect = enemyDetectPlayer();
    if (detect != 1)
    {
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    if (idleTmr &gt; idleMaxTime)
    {
        if (point_distance(path_get_point_x(path, path_get_number(path)-1), 
            path_get_point_y(path, path_get_number(path)-1), target.x, target.y) &gt; weaponAttDist)
        {
            // recalc
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, target);
            exit;        
        }
    }
    physicalMove(collideWith);
    
    break;    
    
case ENEMY_STATE.__WALK:
    procedureAnimableProceed();    
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    if (enemyMoveToPointDone(done))
    {
        // wow we're actually done
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    detect = enemyDetectPlayer();
    if (detect == 1)
    {
        // well, maybe shoot
        if (enemyCanAttack())
        {
            enemyAttack();
            exit;
        }
        enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
    }
    var s = colPlaceFree(x + hspd, y + vspd, collideWith);
    if (s == 0)
    {
        enemySetState(ENEMY_STATE.__IDLE);
    }

    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__ATTACK:
    procedureAnimableApproachReset();
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    if (animEnded)
    {
        physicalClearMaskKick();
        //maskRemoveById(maskKick);
        targetDist = distance_to_object(target);
        if (targetDist &lt;= weaponAttDist)
            enemySetState(ENEMY_STATE.__IDLE);
        else
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
    }
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__CUCKED:
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    if (cuckTmr &amp;&amp; !--cuckTmr)
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__DIE:
    depth = 100;
    if (destrTmr &amp;&amp; !--destrTmr)
    {
        instance_destroy();
    }
    if (animEnded)
    {
        anImageIndex = anImageNumber - 1;
        anImageSpeed = 0;
        animEnded = 0;
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawable)
    exit;
enemyDebug();
if (whiteTmr != 0)
{
    shader_set(shdWhite);
    draw_sprite_ext(sprite_index, anImageIndex, x, y + anH, xsc, image_yscale, anAngle, image_blend, image_alpha);
    shader_reset();
}
else
    draw_sprite_ext(sprite_index, anImageIndex, x, y + anH, xsc, image_yscale, anAngle, image_blend, image_alpha);
// debuffs
enemyDrawBase();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
