<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///nit
image_speed = 0;
randomize();
global.guiW = 1280;
global.guiH = 720;

global.debug = 0;
//window_set_size(global.guiW, global.guiH);
display_set_gui_size(global.guiW, global.guiH);

global.language = LANG.__EN;
global.sound = 0;

global.char = -1;

global.dispW = display_get_width();
global.dispH = display_get_height();

global.oGameState = GAME_STATES.__GAME;
global.gameState = GAME_STATES.__GAME;
cursor_sprite = sCursorTarget;

global.activeShop = noone;

global.money = 250000;

// game
global.playersCount = 0;

global.damageTakeTmr = 4;

// custom sprites e.g. weapons 
customSprs = ds_list_create();

// particles
global.psyses = ds_list_create();
global.pse = gamePsysCreate(1);
part_system_depth(global.pse, 10);


// ===================== jibs ===================
// pillow
global.pillowjibs = part_type_create();
part_type_sprite(global.pillowjibs, sPillowJibs, false, false, true);            
part_type_size(global.pillowjibs, 1, 1.2, 0, 0);                    
part_type_scale(global.pillowjibs, 1, 1);                       
part_type_alpha2(global.pillowjibs, 1, 0.01);                       
part_type_speed(global.pillowjibs, 3, 0.05, -0.05, 0);           
part_type_direction(global.pillowjibs, 0, 359, 0, 1);            
part_type_orientation(global.pillowjibs, 0, 360, 0, 0, 0);           
part_type_blend(global.pillowjibs, false);                         
part_type_life(global.pillowjibs, 2 * room_speed, 8 * room_speed);    

// meat
global.meatjibs = part_type_create();
part_type_sprite(global.meatjibs, sMeatJibs, false, false, true);            
part_type_size(global.meatjibs, 1, 1.2, 0, 0);                    
part_type_scale(global.meatjibs, 1, 1);                       
part_type_alpha2(global.meatjibs, 1, 0.01);                       
part_type_speed(global.meatjibs, 3, 0.05, -0.05, 0);           
part_type_direction(global.meatjibs, 0, 359, 0, 1);            
part_type_orientation(global.meatjibs, 0, 360, 0, 0, 0);           
part_type_blend(global.meatjibs, false);                         
part_type_life(global.meatjibs, 2 * room_speed, 8 * room_speed);

// jelly
global.jellyjibs = part_type_create();
part_type_sprite(global.jellyjibs, sJellyJibs, false, false, true);            
part_type_size(global.jellyjibs, 1, 1.2, 0, 0);                    
part_type_scale(global.jellyjibs, 1, 1);                       
part_type_alpha2(global.jellyjibs, 1, 0.01);                       
part_type_speed(global.jellyjibs, 3, 0.05, -0.05, 0);           
part_type_direction(global.jellyjibs, 0, 359, 0, 1);            
part_type_orientation(global.jellyjibs, 0, 360, 0, 0, 0);           
part_type_blend(global.jellyjibs, false);                         
part_type_life(global.jellyjibs, 2 * room_speed, 8 * room_speed);

// effects
// bullet wzhuh
global.bwzhuh = part_type_create();
part_type_sprite(global.bwzhuh, sWzhuhBullet, 1, 1, 0);            
part_type_orientation(global.bwzhuh, 0, 360, 0, 0, 0);           
part_type_blend(global.bwzhuh, false);                         
part_type_life(global.bwzhuh, 0.1 * room_speed, 0.2 * room_speed);    




// green laser eff
global.lasergreen = part_type_create();
part_type_sprite(global.lasergreen, sLaserWzhuh, 1, 1, 0);            
part_type_orientation(global.lasergreen, 0, 360, 0, 0, 0);           
part_type_blend(global.lasergreen, false);                         
part_type_life(global.lasergreen, 0.1 * room_speed, 0.2 * room_speed);    

// red laser eff
global.laserred = part_type_create();
part_type_sprite(global.laserred, sLaserRedWzhuh, 1, 1, 0);            
part_type_orientation(global.laserred, 0, 360, 0, 0, 0);           
part_type_blend(global.laserred, false);                         
part_type_life(global.laserred, 0.1 * room_speed, 0.2 * room_speed);    

// blue laser eff
global.laserblue = part_type_create();
part_type_sprite(global.laserblue, sLaserBlueWzhuh, 1, 1, 0);            
part_type_orientation(global.laserblue, 0, 360, 0, 0, 0);           
part_type_blend(global.laserblue, false);                         
part_type_life(global.laserblue, 0.1 * room_speed, 0.2 * room_speed);    





// player dash
global.pldash = part_type_create();
part_type_sprite(global.pldash, sWzhuhBullet, 1, 1, 0);            
part_type_size(global.pldash, 0.7, 1.2, 0, 0);                    
//part_type_scale(global.pldash, 1, 1);                       
part_type_orientation(global.pldash, 0, 360, 0, 0, 0);           
part_type_blend(global.pldash, false);                         
part_type_life(global.pldash, 0.1 * room_speed, 0.2 * room_speed);    



// player cactus spikes
global.spikeMaskLife = 2.3 * room_speed;
global.spikesEnd = part_type_create();
part_type_sprite(global.spikesEnd, sSpikesEnd, 0, 0, 0);            
part_type_blend(global.spikesEnd, false);                         
part_type_life(global.spikesEnd, 2 * room_speed, 2 * room_speed);    
part_type_alpha2(global.spikesEnd, 1, .05);

global.spikes = part_type_create();
part_type_sprite(global.spikes, sSpikes, 1, 1, 0);            
part_type_size(global.spikes, 1, 1, 0, 0);                    
part_type_blend(global.spikes, false);                         
part_type_life(global.spikes, .3 * room_speed, .3 * room_speed); 
part_type_death(global.spikes, 1, global.spikesEnd);

//with (instance_create(0, 0, oNextRoom))
//    nextRoomEffectInit(1, rCharChoose, 1, room_width / 3, room_height / 3, 15, global.guiW / 2, global.guiH / 2, 16);

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_destroy(global.pillowjibs);
part_type_destroy(global.meatjibs);
part_type_destroy(global.jellyjibs);
part_type_destroy(global.bwzhuh);
part_type_destroy(global.pldash);

part_type_destroy(global.lasergreen);
part_type_destroy(global.laserred);
part_type_destroy(global.laserblue);

part_type_destroy(global.spikes);
part_type_destroy(global.spikesEnd);
//part_system_destroy(global.pse);
gamePsysFree();
for (var i = 0, ci = ds_list_size(customSprs); i &lt; ci; i++)
{
    sprite_delete(customSprs[| i]);
}
ds_list_destroy(customSprs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// particle systems
for (var i = 1, ci = ds_list_size(global.psyses); i &lt; ci; i++)
{
    var _arr = global.psyses[| i];
    if (_arr[@2] == global.gameState 
        &amp;&amp; _arr[@1] == 1)
        _arr[@3]--;
    if (_arr[@3] &lt;= 0)
    {
        part_system_destroy(_arr[@0]);
        ds_list_delete(global.psyses, i);
    }
}

if (keyboard_check_released(ord('O')))
    game_restart();
if (keyboard_check_released(ord('P')))
    room_restart();
if (keyboard_check_released(ord('U')))
    debugInit(!global.debug);
if (keyboard_check_released(ord('N')))
    instance_create(mouse_x, mouse_y, oPillow);
if (keyboard_check_released(ord('B')))
    instance_create(mouse_x, mouse_y, oJelly);
if (keyboard_check_released(ord('V')))
    instance_create(mouse_x, mouse_y, oOctoGuard);
if (keyboard_check_released(ord('C')))
    instance_create(mouse_x, mouse_y, oOctoAttack);
if (keyboard_check_released(vk_f4))
    window_set_fullscreen(!window_get_fullscreen());
if (keyboard_check_released(vk_left))
    room_goto_previous();
if (keyboard_check_released(vk_right))
    room_goto_next();
    
if (keyboard_check_released(ord('L')))
    if (instance_exists(oLevel))
    {
        var oldd = oLevel.floorD;
        oLevel.floorD = 100000 * (oLevel.floorD &lt; 0) - 100000 * (oLevel.floorD &gt; 0);
        tile_layer_depth(oldd, oLevel.floorD);
    }
    
if (keyboard_check_released(ord('I')))
    oPlayer.hp--;
    
if (keyboard_check_released(188))
    instance_create(mouse_x, mouse_y, oPlayer);
    
if (keyboard_check_released(ord('M')))
    if (!instance_exists(oPlayer))
    {
        view_enabled = 1;
        gamePlayerCreate(mouse_x, mouse_y);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fGame);
draw_text(view_xview + 530, view_yview + 10, string(fps));
draw_text(view_xview + 530, view_yview + 40, string(instance_count));
if (!global.debug)
    exit;
var ccol = c_red;
for (var i = 0; i &lt;= room_width; i += LEVEL.TILE_W)
{
    draw_line_colour(i, 0, i, room_height, ccol, ccol);
    for (var j = 0; j &lt;= room_height; j += LEVEL.TILE_H)
    {
        draw_line_colour(0, j, room_width, j, ccol, ccol);
    }
}
with (oExplosiveCrate)
    draw_text(x, bbox_top - 5, string(hp));
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
