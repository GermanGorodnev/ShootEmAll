<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sOctoGuardNoshield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseEnemyWeaponed</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

spd = 1;
vecdir = 1;
anMaxAngle = 3;
anSinStep = 6;
anMaxH = 2;
dir = 0; // 0 - right

hp = 35;
_hp = 35;

// weapon
weapon = ENEMY_WEAPON.__SHIELD;
weaponType = WEAPON_TYPE.__RANGE;
projectile = PROJECTILE.__PLASM;
enemyType = ENEMY.__OCTO_GUARD;
weaponXoff = 0;
weaponYoff = 0;

dist = 300;
weaponAttDist = 60;
retreatDist = 0; // no mercy

weaponObj = instance_create(x, y, oOctoGuardShield);
weaponObj.parent = id;
enemyWeaponInit(weapon);



maskHitAdd(13, 6, 48, 100, 1);

anims[ENEMY_ANIM.__IDLE] = sprite_index;
anims[ENEMY_ANIM.__WALK] = sprite_index;
anims[ENEMY_ANIM.__CUCKED] = sprite_index;
enemyStartPattern(ENEMY_PATTERN.__PATROL);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with(weaponObj)
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon update
if (!updatable)
    exit;
weaponObj.x = x + weaponXoff * sign(xsc);
weaponObj.y = y + weaponYoff;
switch (weapon)
{
case ENEMY_WEAPON.__SHIELD:
    weaponObj.image_angle = sin(anSinRad) * weaponObj.anMaxAngle;
    //weaponObj.xsc = xsc;
    break;
case ENEMY_WEAPON.__TAZER:
    weaponObj.image_yscale = -(angle == median(90, angle, 270)) + (angle &lt; 90 || angle &gt; 270);
    weaponObj.image_angle = angle + sin(anSinRad) * weaponObj.anMaxAngle;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!enemyActive())
    exit;

cacheUpdate();  
    
depth = -y;

hp = clamp(hp, 0, _hp);
if (hp &lt;= 0 &amp;&amp; state &gt;= 0)
{
    enemySetState(ENEMY_STATE.__DIE);
}
if (whiteTmr &amp;&amp; !--whiteTmr)
{}

idleTmr++;

if (current_time % 4 == 0)
    enemyMoveOutOfOther();
enemyDebuffsProceed();
masksMove();

// 4 dirs anim
switch (weapon)
{
case ENEMY_WEAPON.__SHIELD:
    //xsc = 1;
    vecdir = 1;
    anims[ENEMY_ANIM.__IDLE] = sOctoGuardShielded;
    // x\y off 0
    weaponXoff = 0;
    weaponYoff = 23;
    setSprIfNotSet(anims[ENEMY_ANIM.__IDLE], 0);
    switch (dir)
    {
    case 0:
        image_index = 0;
        weaponXoff = 22;
        weaponYoff = 0;
        with (weaponObj)
        {
            customAnimableSetSprite(sOctoGuardShieldR, 0);
        }
        break;    
    case 1:
        image_index = 2;
        vecdir = -1;
        weaponYoff = -5;
        with (weaponObj)
        {
            customAnimableSetSprite(sOctoGuardShieldT, 0);
        }
        break;    
    case 2:
        image_index = 0;
        weaponXoff = 22;
        weaponYoff = 0;
        //xsc = -1;
        with (weaponObj)
        {
            customAnimableSetSprite(sOctoGuardShieldR, 0);
        }
        break;    
    case 3:
        image_index = 1;
        with (weaponObj)
        {
            customAnimableSetSprite(sOctoGuardShieldT, 0);
            anImageIndex = 1;
        }
        break;    
    }
    break;
case ENEMY_WEAPON.__TAZER:
    xsc = 1;
    vecdir = 1;
    anims[ENEMY_ANIM.__IDLE] = sOctoGuardNoshield;
    weaponObj.sprite_index = sOctoGuardTazer;
    setSprIfNotSet(anims[ENEMY_ANIM.__IDLE], 0);
    switch (dir)
    {
    case 0:
        image_index = 0;
        break;    
    case 1:
        image_index = 2;
        vecdir = -1;
        break;    
    case 2:
        image_index = 0;
        xsc = -1;
        break;    
    case 3:
        image_index = 1;
        break;    
    }
    break;
}
anims[ENEMY_ANIM.__WALK] = anims[ENEMY_ANIM.__IDLE];



switch (state)
{
case ENEMY_STATE.__IDLE:
    procedureAnimableApproachReset();
    physicalBeginStep();
    
    physicalApplyRecoil(recoilSpd, recoilDir); 
    
    //sprite_index = anims[ENEMY_ANIM.__IDLE];
    
    if (weapon == ENEMY_WEAPON.__TAZER)
    {
        angle = point_direction(x, y, target.x, target.y);        
        dir = round(angle / 90);
    }
    detect = enemyDetectPlayer();
    if (detect == 1)
    {
        // well, maybe shoot
        var ca = enemyCanAttack();
        switch (ca)
        {         
        case 1:
            enemyOctopusShieldAttack();
            break;
        case -1:
            if (idleTmr &gt; .2 * room_speed)
            {
                enemyOctopusShieldChangeWeapon(ENEMY_WEAPON.__SHIELD);
                enemyStartPattern(ENEMY_PATTERN.__FOLLOW, target);
            }
            break;
        } 
    }
    else
    {
        if (patrolTmr &amp;&amp; !--patrolTmr)
        {
            enemyStartPattern(ENEMY_PATTERN.__PATROL);   
        } 
    }
    physicalMove(collideWith);
    break;
    
    
    
    
case ENEMY_STATE.__FOLLOW:
    procedureAnimableProceed(); 
    physicalBeginStep();
       
    //setSprIfNotSet(anims[ENEMY_ANIM.__WALK], 0);
    
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    enemySetDirByMoving();
    if (done)
    {
        // wow we're actually done
        if (path_get_number(path) == 0)
            enemySetState(ENEMY_STATE.__IDLE);
        else
            enemyGetNextPathPoint();
        //exit;
    } 
    
    targetDist = distance_to_object(target);

    physicalApplyRecoil(recoilSpd, recoilDir); 

    if (targetDist &lt;= weaponAttDist)
    {
        // wow we're actually done
        if (enemyCanAttack())
        {
            enemyOctopusShieldAttack();
            enemySetState(ENEMY_STATE.__IDLE);
            exit;
        }
    }
    
    detect = enemyDetectPlayer();
    if (detect != 1)
    {
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    
    /*if (enemyCanAttack() == 1)
    {
        enemyFullRotateAndAttack();
        enemySetState(ENEMY_STATE.__IDLE);
    }*/
    
    if (point_distance(path_get_point_x(path, path_get_number(path)-1), path_get_point_y(path, path_get_number(path)-1), target.x, target.y) &gt; weaponAttDist)
    {
        if (idleTmr &gt; 1 * room_speed)
        {
            // recalc
            enemyStartPattern(ENEMY_PATTERN.__FOLLOW, target);        
        }
    }
    
    physicalMove(collideWith);
    break;    
    
    
    
    
    
case ENEMY_STATE.__WALK:
    procedureAnimableProceed();    
    physicalBeginStep();
    
    //setSprIfNotSet(anims[ENEMY_ANIM.__WALK], 0);
    
    enemySetDirByMoving();
    var done = physicalMoveToPoint(mX, mY, spd, speedmod);
    if (enemyMoveToPointDone(done))
    {
        // wow we're actually done
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    
    physicalApplyRecoil(recoilSpd, recoilDir);
    detect = enemyDetectPlayer();
    if (detect == 1)
    {
        // well, maybe shoot
        if (enemyCanAttack())
        {
            enemyOctopusShieldAttack();
            exit;
        }
        enemyStartPattern(ENEMY_PATTERN.__FOLLOW, oPlayer.id);
    }
    
    if (!colPlaceFree(x + hspd, y + vspd, collideWith))
    {
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
        exit;
    }
    
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__ATTACK:
    procedureAnimableApproachReset();        
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__CUCKED:
    procedureAnimableApproachReset();        
    physicalBeginStep();
    physicalApplyRecoil(recoilSpd, recoilDir);
    if (cuckTmr &amp;&amp; !--cuckTmr)
        enemyStartPattern(ENEMY_PATTERN.__PATROL);
    physicalMove(collideWith);
    break;
    
case ENEMY_STATE.__DIE:
    anAngle = 90;
    depth = 100;
    if (destrTmr &amp;&amp; !--destrTmr)
    {
        instance_destroy();
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawable)
    exit;
enemyDebug();

var usesh = whiteTmr != 0;
if (usesh)
    shader_set(shdWhite);

if (vecdir &lt; 0)
{
    with (weaponObj)
        event_perform(ev_other, ev_user3);
    procedureAnimableDrawPerson();
}   
else
{
    procedureAnimableDrawPerson();
    with (weaponObj)
        event_perform(ev_other, ev_user3);
}

shader_reset();

enemyDrawBase();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
