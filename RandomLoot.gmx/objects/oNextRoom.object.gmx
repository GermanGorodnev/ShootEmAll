<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>-1</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inits the effect, and shen it gone - move to the room
event_inherited();
type = 0;
roomId = noone;
withOut = false;
inc = 0.05;

// for 0
alpha = 0;
col = c_black;

// for 1st
srf = -1;
cirx = 0;
ciry = 0;
cirxo = 0;
ciryo = 0;
cirmax = round(sqrt(sqr(room_width)+sqr(room_height)) / 2);
cirr = cirmax;
cird = 0;
cirdo = 0;
draw_set_circle_precision(32);

trans = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (srf != -1)
    surface_free(srf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
if (!updatable)
    exit;
if (!trans)
{
    switch (type)
    {
    case 0: // black screen 
        if (alpha == 1)
        {
            trans = 1;
            room_goto(roomId);
            if (!withOut)
                instance_destroy();
        }
        alpha = min(alpha + inc, 1);
        break;
    case 1:
        if (cirr == 0)
        {
            trans = 1;
            room_goto(roomId);
            if (!withOut)
                instance_destroy();        
        }
        cirr = max(0, cirr - cird);
        break;
    }
}
else
{
    // we're where we have to be
    switch (type)
    {
    case 0:
        if (alpha == 0)
            instance_destroy();
        alpha = max(alpha - inc, 0);
        break;
        
    case 1:
        if (cirr == cirmax)
            instance_destroy();
        cirr = min(cirr + cirdo, cirmax);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing this shit
switch (type)
{
case 0:
    draw_set_alpha(alpha);
    draw_rectangle_colour(0, 0, global.guiW, global.guiH, col, col, col, col, 0);
    break;
    
case 1:
    if (!trans)
    {
        if (!surface_exists(srf)) 
        {
            srf = surface_create(global.guiW, global.guiH);
        }

        surface_set_target(srf);
        draw_clear_alpha(col, 1);
        draw_rectangle_colour(0, 0, global.guiW, global.guiH, col, col, col, col, 0);
        draw_set_blend_mode(bm_subtract);
        draw_circle(cirx, ciry, cirr, 0);
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        draw_surface(srf, 0, 0);        
    }   
    else
    {
        if (!surface_exists(srf)) 
        {
            srf = surface_create(global.guiW, global.guiH);
        }
        surface_set_target(srf);
        draw_clear_alpha(col, 1);
        draw_rectangle_colour(0, 0, global.guiW, global.guiH, col, col, col, col, 0);
        draw_set_blend_mode(bm_subtract);
        draw_circle(cirxo, ciryo, cirr, 0);
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        draw_surface(srf, 0, 0);        
    }
    break;
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
