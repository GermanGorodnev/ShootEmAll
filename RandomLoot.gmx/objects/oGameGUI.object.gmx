<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

ammoGUI = AMMO.__NONE;

colx = 15;
coly = 15;
colw = sprite_get_width(sAmmoGUI);
colh = sprite_get_height(sAmmoGUI);

// shotgun
asx = 15;
asy = coly + sprite_get_height(sAmmoGUI) + 8;
asbx = 17;
asby = sprite_get_height(sAmmoShotgun) - 3;
asrow = 12;

// bullet
abx = 15;
aby = coly + sprite_get_height(sAmmoGUI) + 8;
abbx = colx + 2;
abby = sprite_get_height(sAmmoBullet) - 3;
abrow = 17;//round((room_height - 150) / (abby * 1.5));

// energy
aecolx = 15;
aecoly = 12;
aecolw = sprite_get_width(sAmmoGUIEnergy);
aecolh = sprite_get_height(sAmmoGUIEnergy);
wmx = 15;
wmy = aecoly + sprite_get_height(sAmmoGUIEnergy) + 12;
wmax = wmx + 3;
wmay = wmy + 14;
wmah = 80;

// borgian
borx = 55;
bory = 55;

// grenades
grx = 45;
gry = coly + sprite_get_height(sAmmoGUI) + 40;
grbx = 28;
grby = sprite_get_height(sAmmoGrenade) - 3;
grrow = 17;

// abilities
abX = global.guiW - 105;
abY = global.guiH - 75;
abBX = 50;
abW = sprite_get_width(sAbilities);
abH = sprite_get_height(sAbilities);
abGbx = abW / 2;
abGby = abH / 2;
// single items
sux = abX + 50;
suy = abY + abH / 3;

//params
phbw = sprite_get_width(sPlayerHP);

phbx = 120;
phbetwxt = sprite_get_width(sPlayerHP) -3;
phby = 30;

phbxb = phbx  + 1;
phbyb = phby + sprite_get_height(sPlayerHP) + 7;
phbetwxb = sprite_get_width(sPlayerHP) - 3;


phbh = sprite_get_height(sPlayerHP);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///off pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HP
var hpperc = oPlayer.hp / oPlayer._hp;
for (var i = 0; i &lt; 6; i++)
{
    // background hpbar
    if (i % 2 == 0)
    {
        // top
        draw_sprite_ext(sPlayerHP, 0, phbx + phbetwxt * i, phby, 1, 1, 0, image_blend, image_alpha);
    }
    else
    {
        // bottom
        draw_sprite_ext(sPlayerHP, 0, phbxb + phbetwxb * i, phbyb, 1, -1, 0, image_blend, image_alpha);
    }
}
// red now
var ccnt = floor(oPlayer.hp / 2);
for (var i = 0; i &lt; ccnt; i++)
{
    if (i % 2 == 0)
    {
        // top
        draw_sprite_ext(sPlayerHP, 1, phbx + phbetwxt * i, phby, 1, 1, 0, image_blend, image_alpha);
    }
    else
    {
        // bottom
        draw_sprite_ext(sPlayerHP, 1, phbxb + phbetwxb * i, phbyb, 1, -1, 0, image_blend, image_alpha);
    }
}
// now the percent part
// /1/ 2       /5/ 6       /9/ 10
//       /3/ 4       /7/ 8        /11/ 12
if (oPlayer.hp - ccnt * 2 == 1) // one part
{
    var trunc = ccnt * 2;
    if (trunc % 4 == 0) // top 
    {
        draw_sprite_part_ext(sPlayerHP, 1, 0, 0, phbw / 2, phbh, phbx + phbetwxt * (trunc / 2 ), phby, 1, 1, image_blend, image_alpha);            
    }
    else // bottom 
    {
        draw_sprite_part_ext(sPlayerHP, 1, 0, 0, phbw / 2, phbh, phbxb + phbetwxb * (trunc / 2 ), phbyb, 1, -1, image_blend, image_alpha);                
    }
}


//SWITCH ADD AMMO
switch (ammoGUI)
{
case AMMO.__SHOTGUN:
    draw_sprite_ext(sAmmoGUI, 0, colx, coly, 1, 1, 0, image_blend, image_alpha);
    draw_sprite_part_ext(sAmmoGUI, 1, 0, 0, colw * (oPlayer.ammo[AMMO.__SHOTGUN]/oPlayer.ammoMax[AMMO.__SHOTGUN]), colh, colx, coly, 1, 1, image_blend, image_alpha);

    for (var i = 0, cc = oPlayer.weaponAmmo; i &lt; cc; i++)
    {
        var fl = floor(i / asrow);
        draw_sprite_ext(sAmmoShotgun, 0, 
            asx + fl * asbx, asy + (i % asrow) * asby + fl * 9,
            1, 1, 0, image_blend, image_alpha);
    }
    break;
    
case AMMO.__BULLET:
    draw_sprite_ext(sAmmoGUI, 2, colx, coly, 1, 1, 0, image_blend, image_alpha);
    draw_sprite_part_ext(sAmmoGUI, 3, 0, 0, colw * (oPlayer.ammo[AMMO.__BULLET]/oPlayer.ammoMax[AMMO.__BULLET]), colh, colx, coly, 1, 1, image_blend, image_alpha);

    for (var i = 0, cc = oPlayer.weaponAmmo; i &lt; cc; i++)
    {
        var fl = floor(i / abrow);
        draw_sprite_ext(sAmmoBullet, 0, 
            abx + fl * abbx, aby + (i % abrow) * abby + fl * 9,
            1, 1, 0, image_blend, image_alpha);
    }
    break;

case AMMO.__GRENADES:
    draw_sprite_ext(sAmmoGUI, 4, colx, coly, 1, 1, 0, image_blend, image_alpha);
    draw_sprite_part_ext(sAmmoGUI, 5, 0, 0, colw * (oPlayer.ammo[AMMO.__GRENADES]/oPlayer.ammoMax[AMMO.__GRENADES]), colh, colx, coly, 1, 1, image_blend, image_alpha);

    for (var i = 0, cc = oPlayer.weaponAmmo; i &lt; cc; i++)
    {
        var fl = floor(i / grrow);
        draw_sprite_ext(sAmmoGrenade, 0, 
            grx + fl * grbx, gry + (i % grrow) * grby + fl * 9,
            1, 1, 0, image_blend, image_alpha);
    }
    break;

case AMMO.__ENERGY:
    draw_sprite_ext(sAmmoGUIEnergy, 0, aecolx, aecoly, 1, 1, 0, image_blend, image_alpha);
    draw_sprite_part_ext(sAmmoGUIEnergy, 1, 0, 0, aecolw * (oPlayer.ammo[AMMO.__ENERGY]/oPlayer.ammoMax[AMMO.__ENERGY]), aecolh, aecolx, aecoly, 1, 1, image_blend, image_alpha);

    // woltmeter
    draw_sprite_ext(sWoltmeter, 0, wmx, wmy, 1, 1, 0, image_blend, image_alpha);
    // arrow
    draw_sprite_ext(sWoltmeterArrow, 0, wmax, wmay + (oPlayer.weaponAmmo / oPlayer.weaponInf[W_PR.__SCORE_SIZE]) * wmah, 1, 1, 0, image_blend, image_alpha);
    break;
    
case AMMO.__BORIAN:
    for (var i = 0, cc = oPlayer.weaponAmmo; i &lt; cc; i++)
    {
        var angle = 24 * i,
            xx = borx + lengthdir_x(35, angle),
            yy = bory + lengthdir_y(35, angle);
        draw_sprite_ext(sBorianBulgProjectile, 0, 
            xx, yy,
            1, 1, 0, image_blend, image_alpha);
    }
    break;
}





/////// ABILITIES
for (var i = 0, ic = oPlayer.abilCount; i &lt; ic; i++)
{
    var maxtmr = oPlayer.abilsTmrCnt[i],
        tmr = oPlayer.abilsTmr[i],
        drawx = abX - abBX*i - abW;
    if (tmr == -1) // ready
    {
        draw_sprite_ext(sGUIIcoBack, 0, drawx+abGbx, abY+abGby, 1, 1, 0, image_blend, image_alpha); 
        draw_sprite_ext(sAbilities, oPlayer.abilsIco[i], drawx, abY, 1, 1, 0, image_blend, image_alpha); 
    }
    else
    {
        shader_set(shdGray);
        var percent = (maxtmr - tmr) / maxtmr,
            abHPercent = abH - abH * percent;
        draw_sprite_ext(sGUIIcoBack, 0, drawx+abGbx, abY+abGby, 1, 1, 0, image_blend, image_alpha); 
        draw_sprite_part_ext(sAbilities, oPlayer.abilsIco[i], 0, abHPercent, abW, (abH - abHPercent), drawx, abY + abHPercent, 1, 1, image_blend, image_alpha);     
        shader_reset();
    }
}

//////// SINGLE USE ITEM
draw_sprite_ext(sGUIIcoBack, 1, sux, suy, 1, 1, 0, image_blend, image_alpha);
if (oPlayer.singleuse != SINGLEUSE.__NONE)
{
    draw_sprite_ext(sPickupCards, oPlayer.singleusePar[0], sux, suy, 1, 1, 0, image_blend, image_alpha);
}

//////// MINIMAP
with (oMinimap)
    event_perform(ev_other, ev_user3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (oPlayer)
{
    if (cannot &amp; CANNOT.WALL)
        draw_sprite_ext(sWarnings, 1, x, y - sprite_height - 3, 1, 1, 0, image_blend, image_alpha);
    if (instance_exists(pickupId))
    {
        if (!pickupId.autopickup)
        {
            draw_sprite_ext(sPickup, 0, oPlayer.x, oPlayer.bbox_top - 50, 1, 1, 0, image_blend, image_alpha);
        } 
    }
    else
    {
        if (pwId != noone)
        {
            var xx = pwId.x,
                yy = pwId.y - 50;
            draw_sprite_ext(sPickupWI, 0, xx, yy, 1, 1, 0, image_blend, image_alpha);
            // class
            draw_set_font(fWeaponType);
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
            draw_text_colour(xx - 48, yy - 42, pwType, pwc, pwc, pwc, pwc, image_alpha);  
            // name
            draw_set_font(fWeaponName);
            draw_set_halign(fa_center);
            draw_text_colour(xx + 16, yy - 29, pwName, pwc, pwc, pwc, pwc, image_alpha);  
        }       
    }
    // reload indicator
    if (weaponObj.state == WEAPON_STATES.__RANGE_RELOAD)
    {
        
        var cc = 6 - round((weaponObj.canAttackTmr / weaponObj.reloadTmrBegin) * 6);
        for (var i = 0; i &lt; cc; i++)
        {
            var xx = x,
                yy = bbox_top - 80;
            draw_sprite_ext(sReloadPart, 0, xx, yy, 1, 1, i * 60, image_blend, image_alpha);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
